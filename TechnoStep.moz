@OnLoad
  ShowLayout 1
  
  // Knob constants
  knob_direction = 10
  knob_pulse = 9
  knob_offset = 19
  knob_steps = 20
  knob_controlSteps = 21 
  knob_gateSteps = 20
  knob_lengthSteps = 21 
  
  // Config knob constants
  knob_scale = 0
  knob_root = 1
  knob_relativePitch = 2
  knob_minNote = 3
  knob_maxNote = 4
  
  // Visible UI state
  if Unassigned steps
    steps = 8
  endif
  if Unassigned controlSteps
    controlSteps = 8
  endif
  if Unassigned actualControlSteps
    actualControlSteps = 8
  endif
  if Unassigned gateSteps
    gateSteps = 8
  endif
  if Unassigned actualGateSteps
    actualGateSteps = 8
  endif
  if Unassigned lengthSteps
    lengthSteps = 8
  endif
  if Unassigned actualLengthSteps
    actualLengthSteps = 8
  endif
  
  // Duplicated as there is no Log2 function
  if Unassigned pulse
    pulse = 4
  endif
  if Unassigned pulseDenom
    pulseDenom = 16
  endif
  if Unassigned direction
    direction = 1
  endif
  if Unassigned offset
    offset = 0
  endif
  
  // Config state
  if Unassigned relativePitch
    relativePitch = 0
  endif
  if Unassigned rootNote
    rootNote = 0
  endif
  if Unassigned scale
    scale = 0
  endif
  if Unassigned minNote
    minNote = 0
  endif
  if Unassigned maxNote
    maxNote = 127
  endif
  
  // Sequencer internal state
  metroPulse = -1
  currentStep = -1
  currentControlStep = -1
  currentGateStep = -1  
  currentLengthStep = -1    
  currentStepDelta = 1
  
  if Unassigned stepValues
    stepValues = []
    FillArray stepValues, 63, 8
  endif
  
  if Unassigned controlValues
    controlValues = []
    FillArray controlValues, 100, 8
  endif
  
  if Unassigned gateValues
    gateValues = []
    FillArray gateValues, 63, 8
  endif
  
  if Unassigned lengthValues
    lengthValues = []
    FillArray lengthValues, 0, 8
   endif
  
  lastHostBeat = 0
  lastHostBar = 0
  
  // UI constants
  screen_main = 0
  screen_shift = 1
  screen_menu = 2
  screen_config = 3
  
  pad_randomiseSteps = 0
  pad_randomiseControl = 1
  pad_randomiseGate = 2
  pad_randomiseLength = 3
  pad_config = 8
  
  // UI internal state
  doubleShiftValid = False
  activeScreen = screen_main

  SetRootNote rootNote
  PresetScale scale
  
  Call @UpdateUI
  Call @UpdateKnobs
  Call @UpdateMetronome
@End 

@OnHostStart
  // Assume we have rewound to the start, ideally this would be more robust
  // but there doesn't seem to be a more granular way to detect this
  if HostBar <> lastHostBar OR HostBeat <> lastHostBeat
    metroPulse = -1
  endif
@End 

@OnKnobChange  
  value = GetKnobValue LastKnob
  
  if activeScreen = screen_main
    if LastKnob < 8
      stepValues[LastKnob] = value
    elseif LastKnob >= 11 AND LastKnob < 19
      controlValues[LastKnob - 11] = value
    elseif LastKnob = knob_direction
      direction = Round(TranslateScale value, 0, 127, 0, 1)
      if direction = 0
        currentStepDelta = -1
      else
        currentStepDelta = 1
      endif
    elseif LastKnob = knob_offset
      offset = Round(TranslateScale value, 0, 127, 0, 7)
    elseif LastKnob = knob_pulse
      pulse = Round(TranslateScale value, 0, 127, 0, 5) 
      pulseDenom = Pow 2, pulse
  
      Call @UpdateMetronome
    elseif LastKnob = knob_steps
      steps = Round(TranslateScale value, 0, 127, 1, 8)
    elseif LastKnob = knob_controlSteps
      controlSteps = Round(TranslateScale value, 0, 127, 0, 8)
    endif
    
    Call @UpdateUI
  elseif activeScreen = screen_shift
    if LastKnob < 8
      gateValues[LastKnob] = value
    elseif LastKnob >= 11 AND LastKnob < 19
      lengthValues[LastKnob - 11] = value
    elseif LastKnob = knob_lengthSteps
      lengthSteps = Round(TranslateScale value, 0, 127, 0, 8)  
    elseif LastKnob = knob_gateSteps
      gateSteps = Round(TranslateScale value, 0, 127, 0, 8)
    endif
    
    Call @UpdateUI
  elseif activeScreen = screen_config
    if LastKnob = knob_scale
      scale = Round(TranslateScale value, 0, 127, 0, 24)
      PresetScale scale
    elseif LastKnob = knob_root
      rootNote = Round(TranslateScale value, 0, 127, 0, 12)
      SetRootNote rootNote
      Call @UpdateUI
    elseif LastKnob = knob_relativePitch
      relativePitch = Round(TranslateScale value, 0, 127, 0, 1)
      Call @UpdateUI
    elseif LastKnob = knob_minNote
      minNote = Round value
      Call @UpdateUI
    elseif LastKnob = knob_maxNote
      maxNote = Round value
      Call @UpdateUI
    endif
    
    Call @UpdateUI
  endif
@End 

@OnPadUp
  if activeScreen = screen_menu
    if LastPad = pad_randomiseSteps
      Call @RandomiseSteps
    elseif LastPad = pad_randomiseControl
      Call @RandomiseControl
    elseif LastPad = pad_randomiseGate
      Call @RandomiseGate
    elseif LastPad = pad_randomiseLength
      Call @RandomiseLength
    elseif LastPad = pad_config
      nextScreen = screen_config
      Call @SwitchScreen
    endif
  endif
@End

@RandomiseSteps
  for i = 0 to 7
    stepValues[i] = Random 0, 127
  endfor
@End

@RandomiseControl
  for i = 0 to 7
    controlValues[i] = Random 0, 127
  endfor
@End

@RandomiseGate
  for i = 0 to 7
    gateValues[i] = Random 0, 127
  endfor
@End

@RandomiseLength
  for i = 0 to 7
    lengthValues[i] = Random 0, 127
  endfor
@End

@UpdateUI
  for i = 0 to 21
    LabelKnob i, { }
  endfor
  
  if activeScreen = screen_main
    ShowLayout 1
    LabelKnobs {TechnoStep: Main}
    
    if direction = 0
      LabelKnob knob_direction, {Dir: Rev}
    elseif direction = 1
      LabelKnob knob_direction, {Dir: Fwd}
    endif
  
    LabelKnob knob_pulse, {Pulse: 1/}, pulseDenom
    LabelKnob knob_steps, {Steps: }, steps
    
    if controlSteps = 0
      LabelKnob knob_controlSteps, {Ctrl: ðŸ”—}
    else
      LabelKnob knob_controlSteps, {Ctrl: }, controlSteps
    endif
    
    LabelKnob knob_offset, {Offset: }, offset

    Call @UpdateMainStepsUI
  elseif activeScreen = screen_shift
    ShowLayout 1
    LabelKnobs {TechnoStep: Aux}
    
    if lengthSteps = 0
      LabelKnob knob_lengthSteps, {Length: ðŸ”—}
    else
      LabelKnob knob_lengthSteps, {Length: }, lengthSteps
      endif
      
    if gateSteps = 0
      LabelKnob knob_gateSteps, {Gate: ðŸ”—}
    else
      LabelKnob knob_gateSteps, {Gate: }, gateSteps
    endif
    
    Call @UpdateAuxStepsUI
  elseif activeScreen = screen_config
    ShowLayout 1
    LabelKnobs {TechnoStep: Config}
    
    LabelKnob 0, ScaleName
    LabelKnob 1, {Root: }, RootNoteName 
    LabelKnob 2, {Rel: }, relativePitch 
    LabelKnob knob_minNote, {Min: }, minNote
    LabelKnob knob_maxNote, {Max: }, maxNote
  elseif activeScreen = screen_menu
    ShowLayout 2
    LabelPads {TechnoStep: Menu}
    LabelKnobs { }
    
    LabelPad pad_randomiseSteps, {Randomise Steps}
    LabelPad pad_randomiseControl, {Randomise Control}    
    LabelPad pad_randomiseGate, {Randomise Gate}    
    LabelPad pad_randomiseLength, {Randomise Length}        
    LabelPad pad_config, {Config}
  endif
@End

@UpdateStepsUI
  if activeScreen = screen_main
    Call @UpdateMainStepsUI
  elseif activeScreen = screen_shift
    Call @UpdateAuxStepsUI
  endif
@End

@UpdateMainStepsUI
  Call @UpdateLinkedSteps
  
  for i = 0 to 7
    if i < steps
      if i = currentStep
        LabelKnob i, {*Step }, i + 1, {*}
      else
        LabelKnob i, {Step }, i + 1
      endif
    else 
      LabelKnob i, { } 
    endif
  
    if i < actualControlSteps
      if i = currentControlStep
        LabelKnob i + 11, {*Ctrl }, i + 1, {*}
      else
        LabelKnob i + 11, {Ctrl }, i + 1
      endif
    else
      LabelKnob i + 11, { }
    endif
  endfor 
@End

@UpdateAuxStepsUI
  Call @UpdateLinkedSteps
  
  for i = 0 to 7
    if i < actualGateSteps
      if i = currentGateStep
        LabelKnob i, {*Gate }, i + 1, {*}
      else
        LabelKnob i, {Gate }, i + 1
      endif
    else 
      LabelKnob i, { } 
    endif
  
    if i < actualLengthSteps
      if i = currentLengthStep
        LabelKnob i + 11, {*Length }, i + 1, {*}
      else
        LabelKnob i + 11, {Length }, i + 1
      endif
    else
      LabelKnob i + 11, { }
    endif
  endfor 
@End

@UpdateKnobs
  if activeScreen = screen_main
    for i = 0 to 7
      SetKnobValue i, stepValues[i]
      SetKnobValue (i + 11), controlValues[i]
    endfor
    
    SetKnobValue knob_direction, TranslateScale direction, 0, 1, 0, 127
    SetKnobValue knob_pulse, TranslateScale pulse, 0, 5, 0, 127 
    SetKnobValue knob_offset, TranslateScale offset, 0, 7, 0, 127
    SetKnobValue knob_steps, TranslateScale steps, 1, 8, 0, 127
    SetKnobValue knob_controlSteps, TranslateScale controlSteps, 0, 8, 0, 127
  elseif activeScreen = screen_shift  
    for i = 0 to 7
      SetKnobValue i, gateValues[i]
      SetKnobValue (i + 11), lengthValues[i]      
    endfor
    
    SetKnobValue knob_gateSteps, TranslateScale gateSteps, 0, 8, 0, 127
    SetKnobValue knob_lengthSteps, TranslateScale lengthSteps, 0, 8, 0, 127
  elseif activeScreen = screen_config
    SetKnobValue knob_scale, TranslateScale scale, 0, 24, 0, 127
    SetKnobValue knob_root, TranslateScale rootNote, 0, 12, 0, 127
    SetKnobValue knob_relativePitch, TranslateScale relativePitch, 0, 1, 0, 127
    SetKnobValue knob_minNote, minNote
    SetKnobValue knob_maxNote, maxNote
  endif
@End

@UpdateLinkedSteps
  if controlSteps = 0
    actualControlSteps = steps
  else
    actualControlSteps = controlSteps
  endif
  
  if gateSteps = 0
    actualGateSteps = steps
  else
    actualGateSteps = gateSteps
  endif
  
  if lengthSteps = 0
    actualLengthSteps = steps
  else
    actualLengthSteps = lengthSteps
  endif
@End

@SwitchScreen
  activeScreen = nextScreen
  Call @UpdateUI
  Call @UpdateKnobs
@End

@UpdateMetronome
  SetMetroPPQN pulseDenom / 4
@End

@OnMetroPulse
  if Unassigned remainingLength
    remainingLength = 0
  endif 
  
  if remainingLength > 0
    remainingLength = remainingLength - 1
  else
    // TODO is this the best way vs just keeping e.g. currentStep++? Why?
    metroPulse = metroPulse + 1
    
    currentStep = (metroPulse + offset) % steps
    currentControlStep = ((metroPulse + offset) % actualControlSteps)
    currentGateStep = ((metroPulse + offset) % actualGateSteps)
    currentLengthStep = ((metroPulse + offset) % actualLengthSteps)
      
    note = TranslateScale stepValues[currentStep], 0, 127, minNote, maxNote
  
    if relativePitch
      note = rootNote + note
    endif
    
    note = ScaleQuantize (note)
    
    control = controlValues[currentControlStep]
    // 64 instead of 63 so the default value is slightly < 1 so you don't get legato
    gate = gateValues[currentGateStep] / 64
    length = Round(TranslateScale lengthValues[currentLengthStep], 0, 127, 1, 8)
    remainingLength = length - 1
    
    noteDuration = (QuarterNote / (pulseDenom / 4)) * gate * length
    
    if note > 0
      SendMIDINoteOn 0, note, control, 0
      SendMIDINoteOff 0, note, control, noteDuration
    endif  
  endif

  Call @UpdateStepsUI
@End

@OnNewBar
  lastHostBar = HostBar 
@End

@OnNewBeat
  lastHostBeat = HostBeat
@End

@OnShiftDown
  if activeScreen = screen_main
    nextScreen = screen_shift
    Call @SwitchScreen
  elseif activeScreen = screen_shift
    nextScreen = screen_main
    Call @SwitchScreen
  endif
@End

@OnShiftUp
  if NOT doubleShiftValid   
    doubleShiftValid = True
    SetTimerInterval 500
    StartTimer
  else 
    if activeScreen = screen_main OR activeScreen = screen_shift
      nextScreen = screen_menu
      Call @SwitchScreen
    else
      nextScreen = screen_main
      Call @SwitchScreen
    endif
    
    Call @UpdateUI
    doubleShiftValid = False
  endif
@End 

@OnTimer
  doubleShiftValid = False
  StopTimer
@End
